---
import SidebarStatsRow from "@components/sidebar/SidebarStatsRow.astro";
import GitHubProfilePictureExtended from "@components/GitHubProfilePictureExtended.svelte";
import nextflowIcon from "../../icons/logos/nextflow.svg?raw";
import {
    formatAdvisoryType,
    formatAdvisoryCategory,
    advisoryClasses,
    advisoryIcons,
    getAdvisoryMetadataItems,
} from "./advisoryUtils";

interface Props {
    frontmatter: {
        publishedDate: Date;
        severity: string;
        type: string[];
        category: string[];
        reporter: Array<string | Record<string, string>> | null;
        reviewer?: Array<string | Record<string, string>>;
        nextflowVersions?: string[] | null;
        nextflowExecutors?: string[] | null;
        softwareDependencies?: Array<string | { name: string; versions?: string[] }> | string | null;
    };
}

const { frontmatter } = Astro.props;
const metadataItems = getAdvisoryMetadataItems(frontmatter);

function getReporterInfo(reporter: string | Record<string, string>) {
    if (typeof reporter === "string") {
        return { username: reporter, affiliation: "" };
    }
    return { username: Object.keys(reporter)[0], affiliation: Object.values(reporter)[0] };
}

function getReviewerInfo(reviewer: string | Record<string, string>) {
    if (typeof reviewer === "string") {
        return { username: reviewer, affiliation: "" };
    }
    return { username: Object.keys(reviewer)[0], affiliation: Object.values(reviewer)[0] };
}

const sameReporterAndReviewer =
    frontmatter.reporter &&
    frontmatter.reviewer &&
    JSON.stringify([...frontmatter.reporter].sort()) === JSON.stringify([...frontmatter.reviewer].sort());
---

<div class="d-flex flex-column align-items-start text-smaller">
    <SidebarStatsRow
        content={[
            {
                title: "Published on",
                value: frontmatter.publishedDate.toLocaleDateString("en-GB", {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                }),
            },
            {
                title: "Severity",
                value: `<span class="badge text-bg-${advisoryClasses[frontmatter.severity] || "secondary"}">
            <i class="${advisoryIcons[frontmatter.severity] || "fa-circle-info"} me-1"></i>
            ${formatAdvisoryCategory(frontmatter.severity)}
        </span>`,
            },
        ]}
    />

    <SidebarStatsRow
        content={[
            {
                title: "Type",
                value: `<div class="d-flex flex-column align-items-start">${frontmatter.type
                    .map(
                        (type) =>
                            `<span class="me-1 mb-1">
                        <i class="${advisoryIcons[type] || "fa-circle-info"} me-1"></i>
                        ${formatAdvisoryType(type)}
                    </span>`,
                    )
                    .join("")}</div>`,
            },
            {
                title: "Category",
                value: frontmatter.category
                    .map(
                        (cat) =>
                            `<div class="category-item mb-1 fs-6">
                        <i class="${advisoryIcons[cat] || "fa-solid fa-cogs"} me-1"></i>
                        ${formatAdvisoryCategory(cat)}
                    </div>`,
                    )
                    .join(""),
            },
        ]}
    />

    <SidebarStatsRow content={[]} />

    {
        metadataItems.length > 0 && (
            <SidebarStatsRow
                content={[
                    {
                        title: "Technical Details",
                        value: `<div class="d-flex flex-column align-items-start">${metadataItems
                            .map(
                                (item) =>
                                    `
                                <strong>
                                    ${
                                        item.label === "Nextflow"
                                            ? `<div class="d-inline-block me-1">${nextflowIcon}</div>`
                                            : `<i class="fas ${item.icon} me-1"></i>`
                                    }
                                    ${item.label}:
                                </strong>
                                <span class="text-muted text-small font-monospace">${item.value}</span>
                            `,
                            )
                            .join("")}</div>`,
                    },
                ]}
            />
        )
    }

    {
        frontmatter.reporter && (
            <SidebarStatsRow
                content={[{ title: sameReporterAndReviewer ? "Reported by and reviewed by" : "Reported by" }]}
            >
                {frontmatter.reporter.map((reporter) => {
                    const info = getReporterInfo(reporter);
                    return (
                        <GitHubProfilePictureExtended
                            client:load
                            username={info.username}
                            affiliation={info.affiliation}
                            size={40}
                            wrapperClasses="mt-1"
                        />
                    );
                })}
            </SidebarStatsRow>
        )
    }

    {
        frontmatter.reviewer && !sameReporterAndReviewer && (
            <SidebarStatsRow content={[{ title: "Reviewed by" }]}>
                {frontmatter.reviewer.map((reviewer) => {
                    const info = getReviewerInfo(reviewer);
                    return (
                        <GitHubProfilePictureExtended
                            client:load
                            username={info.username}
                            affiliation={info.affiliation}
                            size={40}
                            wrapperClasses="mt-1"
                        />
                    );
                })}
            </SidebarStatsRow>
        )
    }
</div>

<style lang="scss"></style>
