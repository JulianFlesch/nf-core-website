---
import SidebarStatsRow from "@components/sidebar/SidebarStatsRow.astro";
import GitHubProfilePictureExtended from "@components/GitHubProfilePictureExtended.svelte";
import nextflowIcon from "../../icons/logos/nextflow.svg?raw";
import {
    formatAdvisoryType,
    formatAdvisoryCategory,
    advisoryClasses,
    advisoryIcons,
    getAdvisoryMetadataItems,
} from "./advisoryUtils";

interface Props {
    frontmatter: {
        publishedDate: Date;
        severity: string;
        type: string[];
        category: string[];
        reporter: Array<string | Record<string, string>> | null;
        reviewer?: Array<string | Record<string, string>>;
        nextflowVersions?: string[] | null;
        nextflowExecutors?: string[] | null;
        softwareDependencies?: Array<string | { name: string; versions?: string[] }> | string | null;
    };
}

const { frontmatter } = Astro.props;
const metadataItems = getAdvisoryMetadataItems(frontmatter);

function getReporterInfo(reporter: string | Record<string, string>) {
    if (typeof reporter === "string") {
        return { username: reporter, affiliation: "" };
    }
    return { username: Object.keys(reporter)[0], affiliation: Object.values(reporter)[0] };
}

function getReviewerInfo(reviewer: string | Record<string, string>) {
    if (typeof reviewer === "string") {
        return { username: reviewer, affiliation: "" };
    }
    return { username: Object.keys(reviewer)[0], affiliation: Object.values(reviewer)[0] };
}
---

<div class="d-flex flex-column align-items-start">
    <SidebarStatsRow
        lastChild={false}
        content={[
            {
                title: "Published on",
                value: frontmatter.publishedDate.toLocaleDateString("en-GB", {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                }),
            },
        ]}
    />

    <SidebarStatsRow lastChild={false} content={[{ title: "Severity" }]}>
        <span class={`badge bg-${advisoryClasses[frontmatter.severity] || "secondary"}`}>
            <i class={`${advisoryIcons[frontmatter.severity] || "fa-circle-info"} me-1`}></i>
            {formatAdvisoryCategory(frontmatter.severity)}
        </span>
    </SidebarStatsRow>

    <SidebarStatsRow lastChild={false} content={[{ title: "Type" }]}>
        {
            frontmatter.type.map((type) => (
                <span class={`badge bg-${advisoryClasses[type] || "secondary"} me-1 mb-1`}>
                    <i class={`${advisoryIcons[type] || "fa-circle-info"} me-1`} />
                    {formatAdvisoryType(type)}
                </span>
            ))
        }
    </SidebarStatsRow>

    <SidebarStatsRow lastChild={false} content={[{ title: "Category" }]}>
        {
            frontmatter.category.map((cat) => (
                <div class="category-item mb-1">
                    <i class={`${advisoryIcons[cat] || "fa-solid fa-cogs"} me-1 text-primary`} />
                    {formatAdvisoryCategory(cat)}
                </div>
            ))
        }
    </SidebarStatsRow>

    {
        metadataItems.length > 0 && (
            <SidebarStatsRow lastChild={false} content={[{ title: "Technical Details" }]}>
                {metadataItems.map((item) => (
                    <div class="metadata-item mb-1">
                        {item.label === "Nextflow" ? (
                            <div class="d-inline-block me-1 text-primary">
                                <Fragment set:html={nextflowIcon} />
                            </div>
                        ) : (
                            <i class={`fas ${item.icon} me-1 text-primary`} />
                        )}
                        <strong>{item.label}:</strong> {item.value}
                    </div>
                ))}
            </SidebarStatsRow>
        )
    }

    {
        frontmatter.reporter && (
            <SidebarStatsRow lastChild={false} content={[{ title: "Reported by" }]}>
                {frontmatter.reporter.map((reporter) => {
                    const info = getReporterInfo(reporter);
                    return (
                        <GitHubProfilePictureExtended
                            client:load
                            username={info.username}
                            affiliation={info.affiliation}
                            size={40}
                            wrapperClasses="mt-1"
                        />
                    );
                })}
            </SidebarStatsRow>
        )
    }

    {
        frontmatter.reviewer && (
            <SidebarStatsRow lastChild={true} content={[{ title: "Reviewed by" }]}>
                {frontmatter.reviewer.map((reviewer) => {
                    const info = getReviewerInfo(reviewer);
                    return (
                        <GitHubProfilePictureExtended
                            client:load
                            username={info.username}
                            affiliation={info.affiliation}
                            size={40}
                            wrapperClasses="mt-1"
                        />
                    );
                })}
            </SidebarStatsRow>
        )
    }
</div>

<style lang="scss">
    .badge {
        font-size: 0.875rem;
        padding: 0.35em 0.65em;
        font-weight: 500;
    }

    .category-item {
        display: flex;
        align-items: center;
        color: var(--bs-body-color);
        font-size: 0.95rem;
    }

    .metadata-item {
        display: flex;
        align-items: center;
        color: var(--bs-body-color);
        font-size: 0.9rem;
    }
</style>
